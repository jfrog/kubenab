# Default values for kubenab.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1

imagePullSecrets:

image:
  repository: docker.bintray.io/kubenab
  # Note that by default we use appVersion to get image tag
  # tag:
  pullPolicy: IfNotPresent
  port: 4443

service:
  type: ClusterIP
  port: 443

docker:
  registryUrl:
  registrySecret: regsecret

  # Set to 'true' if you want that the original Registry URL will be
  # replaced with your Docker Domain.
  # Or set to to 'false' if you want to pre-pend your Docker Domain to the
  # original Registry URL.
  #
  # Example:
  # Container Image:              'docker.io/library/nginx:latest'
  # Enabled replaceRegistryUrl:   'jfrog.local/library/nginx:latest'
  # Disabled replaceRegistryUrl:  'jfrog.local/docker.io/library/nginx:latest'
  replaceRegistryUrl: true

## Enabling this will add annotations and a Service-Discovery, so Prometheus
## – especially the Prometheus-Operator – detect this Service and collects
## metrics
metrics:
  enable: true
  scrapeInterval: 10s

  ## you need to enable this if you are using self-signed TLS Certificates
  tlsSkipInsecure: false

## HPA (or HorizontalPodAutoScaling) is an Kubernetes Feature react dynamically
## to special situations.
## Kubernetes will scale 'kubenab' up if the current Number of Instances can't
## handle all the traffic and it will also scale down if there isn't a usage
## for the (new) Instances.
hpa:
  enabled: false

  minReplicas: 1
  maxReplicas: 10

  ## To decide if the number of Replicas must be increased or decreased,
  ## Kubernetes needs Metrics.
  ## Kubernetes has some build-in Metrics (CPU-Utilization, Memory-Usage, ...)
  ## but to use advanced Metrics (like Number of Requests, Response Latency, ...)
  ## you need Prometheus and the Prometheus-Adapter (https://github.com/DirectXMan12/k8s-prometheus-adapter/)
  ## because Prometheus does not "export" those Metrics to Kubernetes.
  metrics:
    ## ===> build-in Metrics <===
    cpuUtilization:
      enabled: false
      averageUtilization: 80

    ## ==> Prometheus Metrics <==
    ## !!The Metrics below requiring that you have deployed Prometheus(-Operator),
    ##   prometheus-adapter and enabled `metrics`!!
    ## !!AND please also !!READ!! the Section 'Automatic Scaling' in the README.md!!

    ## This Metric contains the 'request/s' and the `targetAvg` is the avg across
    ## all deployed Pods, and if the Values is higher then `targetAvg`, Kubernetes
    ## will increase the Number of Replicas.
    httpRequests:
      enabled: false
      targetAvg: 300

    ## Latency describes the avg response Duration across all deployed Pods (99%).
    ## Don't set it below 76ms.
    latency:
      enabled: false
      targetAvg: 5000m # 5000m is equal to 5ms

# Whitelist namespaces e.g "kubesystem,default,development"
whitelistNamespaces: "kube-system,cert-manager"
# Whitelist docker registries within non-whitelisted namespaces e.g "rimusz,10.110.50.0:5000,docker.artifactory.com"
whitelistRegistries:

# Set external secret for TLS certs, it disables SelfSigned certs from the cert-manager
# Run script tls/gen-cert.sh to generate TLS certs and store them in kubenab-tls secret
tls:
  secretName: # kubenab-tls

# Use ValidatingAdmissionWebhook only if you want to check pulling 
# of docker image from a Private Docker Registry e.g JFrog Artifactory. 
# If your container image does not contain REGISTRY_URL then Kubetug will deny request to run that pod.
validatingWebhook:
  enabled: true

# Use MutatingAdmissionWebhook only if you want to enforce pulling 
# of docker image from a Private Docker Registry e.g JFrog Artifactory. 
# If your container image is nginx then Kubetug  will append REGISTRY_URL to it. e.g nginx will become someregistry/nginx
mutatingWebhook:
  enabled: false

resources:
  limits:
    cpu: 200m
    memory: 256Mi
  requests:
    cpu: 50m
    memory: 64Mi

# Defines securityContext for deployment to remove all permissions
# that are not needed.
securityContext:
  enabled: true
  privileged: false
  runAsNonRoot: true
  runAsUser: 1000
  allowPrivilegeEscalation: false
  readOnlyRootFilesystem: true
  capabilities:
    drop:
      - ALL

# Defines livenessProbe to monitor deployment
livenessProbe:
  enabled: true
  initialDelaySeconds: 1
  failureThreshold: 10
  periodSeconds: 10
  httpGet:
    path: "/ping"
    port: 4443
    scheme: HTTPS

# Defines readinessProbe to monitor deployment
readinessProbe:
  enabled: true
  initialDelaySeconds: 1
  failureThreshold: 10
  periodSeconds: 10
  httpGet:
    path: "/ping"
    port: 4443
    scheme: HTTPS

# Defines priorityClass to run the deployment
priorityClass:
    enabled: true
    name: system-cluster-critical

## Role Based Access Control
rbac:
  create: true
  role:
    ## Rules to create. It follows the role specification
    rules:
    - apiGroups:
      - ''
      resources:
      - services
      - endpoints
      - pods
      verbs:
      - get
      - watch
      - list

affinity: {}

tolerations: []

nodeSelector: {}
